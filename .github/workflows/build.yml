name: Build and Deploy Dev

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  update_env_dev:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get submodule commit hashes
        run: |
          SUBMODULE_HASHES=$(git submodule status | awk '{print $1, $2}')
          echo "$SUBMODULE_HASHES" > submodule_hashes.txt

      - name: Create .env.dev file
        run: |
          echo "# Submodule commit hashes for development" > ./config/.env.dev.new
          while read -r line; do
          hash=$(echo $line | awk '{print $1}' | tr -d '-')
          submodule=$(echo $line | awk '{print $2}' | tr '-' '_')
          echo "${submodule^^}_COMMIT_HASH=$hash" >> ./config/.env.dev.new
          done < submodule_hashes.txt

      - name: Check diff
        id: check_diff
        run: |
          if [ -f ./config/.env.dev ]; then
              echo "Checking diff between .env.dev and .env.dev.new"
              if diff --brief ./config/.env.dev ./config/.env.dev.new; then
                  echo "::set-output name=env_diff::false"
              else
                  echo "::set-output name=env_diff::true"
                  mv ./config/.env.dev.new ./config/.env.dev
              fi
          else
              echo "No existing .env.dev file found"
              echo "::set-output name=env_diff::true"
              mv ./config/.env.dev.new ./config/.env.dev
          fi

      - name: Commit and push .env.dev if there are changes
        if: steps.check_diff.outputs.env_diff == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ./config/.env.dev
          git commit -m "Update submodule hashes for development"
          git push

  build:
    needs:
      - update_env_dev
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop' || github.event_name == 'pull_request' && github.base_ref == 'develop'
    steps:
      - name: Set build_flag
        id: set_build_flag
        run: echo "::set-output name=build_flag::true"
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.PAT_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Print current directory
        run: |
          echo "Current directory: $GITHUB_WORKSPACE"
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '17'
      # Gradle action from GitHub marketplace is used for better maintainability
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Push Docker Hub
        run: |
          pwd
      - name: Build Jar files
        run: |
          chmod +x gradlew
          gradle buildAllProjects
      - name: push Docker image
        run: |
          docker compose --env-file ./config/.env.dev -f compose-dev.yaml build --push

  deploy:
    runs-on: self-hosted
    needs: [update_env_dev, build]
    if: ${{ needs.update_env_dev.outputs.env_diff == 'true' || needs.build.outputs.build_flag == 'true' }}
    steps:
      - uses: actions/checkout@v3
      - name: Print current directory
        run: |
          pwd
      #        with:
      #          submodules: recursive
      #          token: ${{ secrets.PAT_TOKEN }}
      - name: Run Docker compose
        run: |
          docker compose --env-file ./config/.env.dev -f compose-dev.yaml up -d >/dev/null 2>&1
